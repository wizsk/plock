package main

import (
	"strings"
	"unicode/utf8"
)

type symbol []string
type text []symbol
type font map[rune]symbol

func (s symbol) width() int {
	return utf8.RuneCountInString(s[0])
}

func (s symbol) height() int {
	return len(s)
}

func (t text) width() int {
	l := 0
	for _, s := range t {
		l += s.width()
	}
	return l
}

func (t text) height() int {
	return len(t[0])
}

func toText(s string) text {
	t := make(text, 0)
	for _, r := range s {
		if v, ok := defaultFont[r]; ok {
			t = append(t, v)
		}
	}
	return t
}

func (t text) String() string {
	if len(t) == 0 {
		return ""
	}

	sb := strings.Builder{}
	for h := 0; h < t.height(); h++ {
		for _, sym := range t {
			sb.WriteString(sym[h])
		}
		sb.WriteByte('\n')
	}
	return sb.String()
}

var defaultFont = font{
	':': {
		"   ",
		"██╗",
		"╚═╝",
		"██╗",
		"╚═╝",
		"   ",
	},
	'0': {
		" ██████╗ ",
		"██╔═████╗",
		"██║██╔██║",
		"████╔╝██║",
		"╚██████╔╝",
		" ╚═════╝ ",
	},
	'1': {
		" ██╗",
		"███║",
		"╚██║",
		" ██║",
		" ██║",
		" ╚═╝",
	},
	'2': {
		"██████╗ ",
		"╚════██╗",
		" █████╔╝",
		"██╔═══╝ ",
		"███████╗",
		"╚══════╝",
	},
	'3': {
		"██████╗ ",
		"╚════██╗",
		" █████╔╝",
		" ╚═══██╗",
		"██████╔╝",
		"╚═════╝ ",
	},
	'4': {
		"██╗  ██╗",
		"██║  ██║",
		"███████║",
		"╚════██║",
		"     ██║",
		"     ╚═╝",
	},
	'5': {
		"███████╗",
		"██╔════╝",
		"███████╗",
		"╚════██║",
		"███████║",
		"╚══════╝",
	},
	'6': {
		" ██████╗ ",
		"██╔════╝ ",
		"███████╗ ",
		"██╔═══██╗",
		"╚██████╔╝",
		" ╚═════╝ ",
	},
	'7': {
		"███████╗",
		"╚════██║",
		"    ██╔╝",
		"   ██╔╝ ",
		"   ██║  ",
		"   ╚═╝  ",
	},
	'8': {
		" █████╗ ",
		"██╔══██╗",
		"╚█████╔╝",
		"██╔══██╗",
		"╚█████╔╝",
		" ╚════╝ ",
	},
	'9': {
		" █████╗ ",
		"██╔══██╗",
		"╚██████║",
		" ╚═══██║",
		" █████╔╝",
		" ╚════╝ ",
	},
	' ': {
		"  ",
		"  ",
		"  ",
		"  ",
		"  ",
		"  ",
	},
	'A': {
		" █████╗ ",
		"██╔══██╗",
		"███████║",
		"██╔══██║",
		"██║  ██║",
		"╚═╝  ╚═╝",
	},
	'M': {
		"███╗   ███╗",
		"████╗ ████║",
		"██╔████╔██║",
		"██║╚██╔╝██║",
		"██║ ╚═╝ ██║",
		"╚═╝     ╚═╝",
	},
	'P': {
		"██████╗ ",
		"██╔══██╗",
		"██████╔╝",
		"██╔═══╝ ",
		"██║     ",
		"╚═╝     ",
	},
}

var pausedText = symbol{
	"█▀▄ ▄▀▄ █ █ ▄▀▀ ██▀ █▀▄",
	"█▀  █▀█ ▀▄█ ▄██ █▄▄ █▄▀",
}

var startingAt = symbol{
	"█▀▀ ▀█▀ █▀█ █▀▄ ▀█▀ ▀█▀ █▀█ █▀▀   █▀█ ▀█▀",
	"▀▀█  █  █▀█ █▀▄  █   █  █ █ █ █   █▀█  █ ",
	"▀▀▀  ▀  ▀ ▀ ▀ ▀  ▀  ▀▀▀ ▀ ▀ ▀▀▀   ▀ ▀  ▀ ",
}
